<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{

    public function getNotifications($friends, $events, $user)
    {

        $friendsIds = array();
        foreach ($friends as $friend) {
            $friendsIds[] = $friend->getId();
        }
        $eventsIds = array();
        foreach ($events as $event) {
            $eventsIds[] = $event->getId();
        }
        $hiddenNotifications = $user->getHiddenNotification();
        $hiddenNotificationsIds = array();
        foreach ($hiddenNotifications as $hiddenNotification) {
            $hiddenNotificationsIds[] = $hiddenNotification->getId();
        }
        $userId = $user->getId();

        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->addSelect('notification');
        $qb->addSelect('user');
        $qb->addSelect('hide_to');
        $qb->addSelect('event');

        $qb->from('AppBundle:Notification', 'notification');
        $qb->leftJoin('notification.user', 'user');
        $qb->leftJoin('user.hidden_notification', 'hide_to');
        $qb->leftJoin('notification.event', 'event');

        if ($friendsIds) {
            $qb->andWhere($qb->expr()->in('user.id', $friendsIds));
        }
        if ($eventsIds) {
            $qb->orWhere($qb->expr()->in('event.id', $eventsIds));
        }
        if ($hiddenNotificationsIds) {
            $qb->andWhere($qb->expr()->notIn('notification.id', $hiddenNotificationsIds));
        }
        $qb->andWhere($qb->expr()->notIn('user.id', $userId));


        $q = $qb->getQuery();

        try {
            return $q->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    public function getAllNotifications($friends, $events, $user, $showSixResults)
    {

        $friendsIds = array();
        foreach ($friends as $friend) {
            $friendsIds[] = $friend->getId();
        }
        $eventsIds = array();
        foreach ($events as $event) {
            $eventsIds[] = $event->getId();
        }

        $userId = $user->getId();

        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->addSelect('notification');
        $qb->addSelect('user');
        $qb->addSelect('event');

        $qb->from('AppBundle:Notification', 'notification');
        $qb->leftJoin('notification.user', 'user');
        $qb->leftJoin('notification.event', 'event');

        if ($friendsIds) {
            $qb->andWhere($qb->expr()->in('user.id', $friendsIds));
        }
        if ($eventsIds) {
            $qb->orWhere($qb->expr()->in('event.id', $eventsIds));
        }
        $qb->andWhere($qb->expr()->notIn('user.id', $userId));
        if ($showSixResults) {
            $qb->getMaxResults(6);
        }
        $qb->orderBy('notification.id', 'DESC');


        $q = $qb->getQuery();

        try {
            return $q->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    
    public function getPlaceNotification($places)
    {

        $placesIds = array();
        foreach ($places as $place) {
            $placesIds[] = $place->getId();
        }

        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->select('n')
                ->from('AppBundle:Notification', 'n')
                ->leftJoin('n.place', 'p');
        $qb->andWhere($qb->expr()->in('p.id', $placesIds));
        $qb->orderBy('n.id', 'DESC');


        $q = $qb->getQuery();

        try {
            return $q->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

}
